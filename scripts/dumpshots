#!/usr/bin/env python 
import os
import sys
import time
import argparse
import h5py

import numpy as np
import psana 

import thor
from pypad import cspad
from pypad.read import enforce_raw_img_shape as eris
from pypad.utils import update_average, RadialAverager


hutch = os.environ['EXPT'][:3]
expt  = os.environ['EXPT']

parser = argparse.ArgumentParser(description='Average some runs from the current experiment')

parser.add_argument(
    '-r', '--run',
    type=int,
    help='run to process',
    required=True
)

parser.add_argument(
    '-m', '--max',
    type=int,
    help='max number of shots to average',
    default=None
)

args = parser.parse_args()

# ---------------------------
# PSANA CONFIG FILE - this must be set before a datasource is created
basedir = '/reg/d/psdm/%s/%s/res/cfg' % (hutch, expt)
config_fn = os.path.join(basedir, '%s.cfg' % expt)

psana.setConfigFile(config_fn)
psana.setOption('psana.l3t-accept-only',0)
print "Loading psana config file:    %s" % config_fn

cspad_ds1_src  = psana.Source('DetInfo(CxiDs1.0:Cspad.0)')
cspad_ds2_src  = psana.Source('DetInfo(CxiDs2.0:Cspad.0)')
evr_src        = psana.Source('DetInfo(NoDetector.0:Evr.0)')


print "\nReading run #: %d" % args.run
ds = psana.DataSource('exp=%s:run=%d' % (expt, int(args.run)) )
epics = ds.env().epicsStore()
calib = ds.env().calibStore()

shot_index = 0

if args.max:
    print 'Stopping after %d shots...' % args.max

output_path = '/reg/d/psdm/%s/%s/scratch/single_shots/' % (hutch, expt)
f = h5py.File(os.path.join(output_path, 'run%d_shots.h5' % args.run))

for evt in ds.events():

    if shot_index == args.max:
        print 'max number of shots reached!'
        break

    EVR_code = evt.get(psana.EvrData.DataV3, evr_src)
    if EVR_code is None:
        print 'Error, EVR code is `None`'
        continue

    ds1 = evt.get(psana.ndarray_float32_3, cspad_ds1_src, 'calibrated_ndarr')
    ds2 = evt.get(psana.ndarray_float32_3, cspad_ds2_src, 'calibrated_ndarr')

    if (ds1 == None) or (ds2 == None):
        print 'Error, data is `None`'
        continue

    ds1 = ds1.copy()
    ds2 = ds2.copy()

    # threshold at 20 photons
    #t = 20.0
    #ds1[ds1 < t] = 0.0
    #ds2[ds2 < t] = 0.0

    f['/evt%d/ds1' % shot_index] = ds1
    #f['/evt%d/ds2' % shot_index] = ds2

    shot_index += 1
    print 'Shot : %d' % shot_index


f.close()
print 'Saved results to: %s' % output_path

