#!/usr/bin/env python

"""
TJL Oct 22, 2014
"""

import sys
#sys.path.append('/reg/neh/home2/tjlane/opt/minitti_beamtime')
#sys.path.append('/reg/neh/home2/tjlane/opt/pypad')
#sys.path.append('/reg/neh/home2/tjlane/opt/trapdoor')
import argparse
import numpy as np
from thor import math2

from minitti.libminitti import *
from minitti.shot import Event

from pypad import psana as psutil
from pypad import cspad

import psana
from trapdoor import core


# ---------------------------
# manually set parameters
n_q_bins          = 251
update_frequency  = 1000
# ---------------------------


class MinittiAnalyzer(core.MapReducer):
    
    def __init__(self, **kwargs):
        
        self.args = self.parse_args()
        self.zmq_initialized = False

        self.laseroff_iv = math2.IncrementalVariance(n_q_bins)
        self.laseron_iv  = math2.IncrementalVariance(n_q_bins)

        super(MinittiAnalyzer, self).__init__(self.map, self.reduce, self.action,
                                              source=self._source, **kwargs)
        
        print self._source_string 
        ds = psana.DataSource(self._source_string)
        
        self.epics = ds.env().epicsStore()
        self.calib = ds.env().calibStore()
        
        # masks/geometries are (32, 185, 388)
        ds1_qs = np.load('/reg/data/ana14/cxi/cxif7214/res/geometries/v2/q_values.npy')
        ds1_mask = np.load('/reg/d/psdm/cxi/cxif7214/res/masks/v3/no_ring_mask.npy')
        self.ds1_ra = RadialAverager(ds1_qs, ds1_mask, n_bins=n_q_bins)        

        return
    
        
    def parse_args(self):
        parser = argparse.ArgumentParser(description='Psana plot server application')
        parser.add_argument(
            '-r',
            '--run',
            type=int,
            default=-1,
            help='Which run to analyze, -1 for live stream',
        )
        parser.add_argument(
            '-p',
            '--port',
            metavar='PORT',
            type=int,
            default=4747,
            help='the tcp port to use on the server'
        )

        if parser.parse_args().run == -1:
            self._source = 'cxishmem'
        else:
            self._source = 'exp=cxif7214:run=%d' % parser.parse_args().run
 
        return parser.parse_args()
    
        
    def init_zmq(self):
        self.zmq_initialized = True
        context = zmq.Context()
        socket = context.socket(zmq.PUB)
        socket.setsockopt(zmq.SNDHWM, 10)
        socket.bind("tcp://*:%d" % self.args.port)
        print "Broadcasting via ZMQ on port: %d" % self.args.port
        self.socket = socket
        return
    
        
    def map(self, evt, intensity_threshold=20.0):

        if not evt:
            return np.zeros(n_q_bins)
        
        try:
            x = Event(evt, self.epics, 
                      495.0, 0.0,
                      0.0, corrected=True)
        except Exception as e:
            print e
            return np.zeros(n_q_bins)

        if x.ds1_intensities != None:
            itx = x.ds1_intensities.copy()
            itx[itx < intensity_threshold] = 0.0
            Iq = self.ds1_ra(itx).astype(np.float)
        else:
            Iq = np.zeros(n_q_bins)
            print 'WARNING: no CSPAD data'

        # I am going to make the fairly dangerous choice of passing the
        # laser on/off information through from workers to the master in
        # the form of the sign of the *LAST* q-bin -- this will be looked
        # for and interpreted downstream
        if x.pump_laser_status == 0:
            Iq[-1] = -1e-32
        elif x.pump_laser_status == 1:
            Iq[-1] = 1e-32
        else:
            Iq = np.zeros(n_q_bins)
            print 'WARNING: unknown laser status'

        return Iq
    
        
    def reduce(self, Iq, old):
        if Iq[-1] < 0:
            self.laseroff_iv.add(Iq)
        elif Iq[-1] > 0:
            self.laseron_iv.add(Iq)    
        else:
            # something went wrong upstream ...
            pass
        return Iq

    
    def action(self, placeholder=None):

        n = self.laseroff_iv.num_samples + self.laseron_iv.num_samples

        if not self.zmq_initialized:
            self.init_zmq()

        if n % update_frequency == 0:
            q = self.ds1_ra.bin_centers
            
            on_avg  = normalize(q, self.laseron_iv.mean, 1.0, 3.0)
            off_avg = normalize(q, self.laseroff_iv.mean, 1.0, 3.0)

            diff = on_avg - off_avg
            percent = diff / off_avg
 
            if self.args.run == -1:
                s = 'LIVE STREAM'
            else:
                s = 'RUN %d' % self.args.run
            title_txt = '%s | %d SHOTS PROCESSED' % (s, n)

            transmission = {
                            'title'         : title_txt,
                            'q_values'      : q,
                            'laser_on_avg'  : on_avg,
                            'laser_off_avg' : off_avg,
                            'diff'          : diff,
                            'percent_diff'  : percent
                           }
       
            self.socket.send("data", zmq.SNDMORE)
            self.socket.send_pyobj(transmission)

            if self.offline:
                savepath = '/reg/d/psdm/cxi/cxif7214/scratch/convergence/run%d.h5' % self.args.run
                f = h5py.File(savepath, 'a')
                f['/laseron_%dshots' % self.laseron_iv.num_samples]  = self.laseron_iv.mean
                f['/laseroff_%dshots' % self.laseroff_iv.num_samples] = self.laseroff_iv.mean
                f.close()
        
        return


if __name__ == '__main__':
    m = MinittiAnalyzer(result_buffer=np.zeros(n_q_bins),
                        config_file='/reg/neh/operator/cxiopr/tjlane/cxif7214.cfg')
    m.start(verbose=True)
    
    
    
