#!/usr/bin/env python

import os
import sys
import time
import argparse
import h5py

import numpy as np
import psana 

import thor
from pypad import cspad
from pypad.read import enforce_raw_img_shape as eris
from pypad.utils import update_average, RadialAverager


hutch = os.environ['EXPT'][:3]
expt  = os.environ['EXPT']

parser = argparse.ArgumentParser(description='Average some runs from the current experiment')

parser.add_argument(
    '-r', '--run',
    type=int,
    help='run to process',
    required=True
)

parser.add_argument(
    '-m', '--max',
    type=int,
    help='max number of shots to average',
    default=None
)

args = parser.parse_args()

# ---------------------------
# PSANA CONFIG FILE - this must be set before a datasource is created
basedir = '/reg/d/psdm/%s/%s/res/cfg' % (hutch, expt)
config_fn = os.path.join(basedir, '%s.cfg' % expt)

psana.setConfigFile(config_fn)
psana.setOption('psana.l3t-accept-only',0)
print "Loading psana config file:    %s" % config_fn

cspad_ds1_src  = psana.Source('DetInfo(CxiDs1.0:Cspad.0)')
evr_src        = psana.Source('DetInfo(NoDetector.0:Evr.0)')


print "\nReading run #: %d" % args.run
ds = psana.DataSource('exp=%s:run=%d' % (expt, int(args.run)) )
epics = ds.env().epicsStore()
calib = ds.env().calibStore()

shot_index = 0
num_180 = 0
num_181 = 0
num_183 = 0
num_184 = 0
num_187 = 0
num_189 = 0
num_192 = 0


evr183_average = np.zeros((32, 185, 388))
evr184_average = np.zeros((32, 185, 388))

evr180_average = np.zeros((32, 185, 388))
evr181_average = np.zeros((32, 185, 388))

evr192_average = np.zeros((32, 185, 388))

evr187_average = np.zeros((32, 185, 388))
evr189_average = np.zeros((32, 185, 388))

if args.max:
    print 'Stopping after %d shots...' % args.max

for evt in ds.events():

    if shot_index == args.max:
        print 'max number of shots reached!'
        break

    EVR_code = evt.get(psana.EvrData.DataV3, evr_src)
    if EVR_code is None:
        print 'Error, EVR code is `None`'
        continue

    fifos = evt.get(psana.EvrData.DataV3, psana.Source('DetInfo(NoDetector.0:Evr.0)')).fifoEvents()
    evrs = [e.eventCode() for e in fifos]

    ds1 = evt.get(psana.ndarray_float32_3, cspad_ds1_src, 'calibrated_ndarr').copy()
    ds1[ds1 < 20.0] = 0.0

    if (ds1 == None):
        print 'Error, data is `None`'
        continue

    # get the corrected pixel intensities      
    if 183 in evrs:
        num_183 += 1
        update_average(num_183, evr183_average, ds1)
    elif 184 in evrs:
        num_184 += 1
        update_average(num_184, evr184_average, ds1)
    else:
        print 'WARNING EVR 183 & 184'


    if 180 in evrs:
        num_180 += 1
        update_average(num_180, evr180_average, ds1)
    elif 181 in evrs:
        num_181 += 1
        update_average(num_181, evr181_average, ds1)
    elif 187 in evrs:
        num_187 += 1
        update_average(num_187, evr187_average, ds1)
    elif 189 in evrs:
        num_189 += 1
        update_average(num_189, evr189_average, ds1)
    elif 192 in evrs:
        num_192 += 1
        update_average(num_192, evr192_average, ds1)
    else:
        print 'WARNING EVR 187 & 189'

    shot_index += 1
    print 'Shot : %d' % shot_index


output_path = '/reg/d/psdm/%s/%s/scratch/averages' % (hutch, expt)
np.save(os.path.join(output_path, 'run%d_evr180_average.npy' % args.run), evr180_average)
np.save(os.path.join(output_path, 'run%d_evr181_average.npy' % args.run), evr181_average)
np.save(os.path.join(output_path, 'run%d_evr183_average.npy' % args.run), evr183_average)
np.save(os.path.join(output_path, 'run%d_evr184_average.npy' % args.run), evr184_average)
np.save(os.path.join(output_path, 'run%d_evr187_average.npy' % args.run), evr189_average)
np.save(os.path.join(output_path, 'run%d_evr189_average.npy' % args.run), evr189_average)
np.save(os.path.join(output_path, 'run%d_evr192_average.npy' % args.run), evr192_average)

print 'Saved results to: %s' % output_path

