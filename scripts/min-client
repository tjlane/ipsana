#!/usr/bin/env python

import zmq
import sys
import time
import argparse

import matplotlib.pyplot as plt
import matplotlib.animation as animation

import numpy as np

class PPPlot(object):
    def __init__(self, init_data, framegen, info, rate):

        self.figure = plt.figure(figsize=(12,6))
        self.title_txt = self.figure.suptitle('Waiting for data...')

        self.axL = plt.subplot(121)
        self.axR = plt.subplot(122)

        self.framegen = framegen
        self.rate_ms = rate * 1000
        self.info = info

        self.update(init_data)

        return


    def update(self, data):
        if data == None: return
       
        self.axL.cla()
        self.axR.cla()

        if 'title' in data.keys():
            self.title_txt.set_text(data['title'])

        if 'laser_on_avg' in data.keys():
            self.axL.plot(data['q_values'], data['laser_on_avg'], color='pink', lw=2, label='laser_on_avg')
        if 'laser_off_avg' in data.keys():
            self.axL.plot(data['q_values'], -data['laser_off_avg'], color='green', lw=2, label='laser_off_avg')
        self.axL.legend()

        if 'diff' in data.keys():
            self.axR.plot(data['q_values'], data['diff'], color='purple', lw=2, label='onoff_diff')
        if 'percent_diff' in data.keys():
            self.axR.plot(data['q_values'], data['percent_diff'], color='teal', lw=2, label='onoff_percent_diff')
        self.axR.legend()

        self.axL.set_xlabel(r'q $\AA^{-1}$')
        self.axR.set_xlabel(r'q $\AA^{-1}$')

        self.axL.set_ylabel('Intensity (ADU)')
        self.axR.set_ylabel('Change')


        return [self.axL, self.axR]


    def animate(self):
        return animation.FuncAnimation(self.figure, self.update,
                                       self.ani_func, interval=self.rate_ms)

    def ani_func(self):
        yield self.framegen.next()




def parse_cmdline():
    parser = argparse.ArgumentParser(
        description='Psana plot client application'
    )
#    parser.add_argument(
#        'topic',
#        help='The topic from the server to suscribe too'
#    )
    parser.add_argument(
        '-s',
        '--server',
        metavar='SERVER',
        help='the host name of the server'
    )
    parser.add_argument(
        '-p',
        '--port',
        metavar='PORT',
        type=int,
        default=5556,
        help='the tcp port to use on the server'
    )
    return parser.parse_args()


def socket_recv(socket):
    topic = socket.recv()
    return socket.recv_pyobj()


def get_socket_gen(socket):
    poller = zmq.Poller()
    poller.register(socket, zmq.POLLIN)
    while True:
        socks = dict(poller.poll(100))
        if socks.get(socket) == zmq.POLLIN:
            yield socket_recv(socket)
        else:
            yield


def main():

    topic = 'data'

    try:
        args = parse_cmdline()

        context = zmq.Context()
        socket = context.socket(zmq.SUB)
        socket.setsockopt(zmq.SUBSCRIBE, topic)
        #socket.setsockopt(zmq.RCVHWM, args.buffer)
        socket.connect("tcp://%s:%d" % (args.server, args.port))
        print "Listening for topic %s from %s on port %d" % (topic, args.server, args.port)

        # grab an initial datagram from the server
        init_data = socket_recv(socket)

        if init_data is not None:
            plot = PPPlot(init_data, get_socket_gen(socket), 'info', rate=10.0)
            plot_ani = plot.animate()
            try:
                plt.show()
            except:
                # sort of ugly but this can throw all kinds of errors when closing a window
                pass
        else:
            print 'Server did not return a valid datatype!'
        
    except KeyboardInterrupt:
        print '\nExitting client!'


if __name__ == '__main__':
    main()


